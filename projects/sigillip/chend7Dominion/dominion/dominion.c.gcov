        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:29
        -:    0:Programs:29
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 2153 returned 100% blocks executed 100%
     2153:    8:int compare(const void* a, const void* b) {
     2153:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
      819:   10:    return 1;
     1334:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
      541:   12:    return -1;
      793:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 16 returned 100% blocks executed 83%
       16:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       16:   44:  SelectStream(1);
call    0 returned 100%
       16:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       16:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      176:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1760:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       16:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       16:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       16:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       16:   89:      state->supplyCount[estate] = 8;
       16:   90:      state->supplyCount[duchy] = 8;
       16:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       16:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       16:  102:  state->supplyCount[silver] = 40;
       16:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      336:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     2640:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     2480:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      160:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      160:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      160:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2320:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       48:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       32:  140:      state->deckCount[i] = 0;
      128:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       96:  143:	  state->deck[i][j] = estate;
       96:  144:	  state->deckCount[i]++;
        -:  145:	}
      256:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      224:  148:	  state->deck[i][j] = copper;
      224:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       48:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       32:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       48:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       32:  166:      state->handCount[i] = 0;
       32:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      448:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      432:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       16:  182:  state->outpostPlayed = 0;
       16:  183:  state->phase = 0;
       16:  184:  state->numActions = 1;
       16:  185:  state->numBuys = 1;
       16:  186:  state->playedCardCount = 0;
       16:  187:  state->whoseTurn = 0;
       16:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       96:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       80:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       16:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       16:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 43 returned 100% blocks executed 100%
       43:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       43:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       43:  209:  if (state->deckCount[player] < 1)
branch  0 taken 23% (fallthrough)
branch  1 taken 77%
       10:  210:    return -1;
       33:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      636:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
      570:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      570:  216:    newDeck[newDeckPos] = state->deck[player][card];
      570:  217:    newDeckPos++;
    17161:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
    16591:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      570:  221:    state->deckCount[player]--;
        -:  222:  }
      603:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
      570:  224:    state->deck[player][i] = newDeck[i];
      570:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       33:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 4 returned 100% blocks executed 93%
        4:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        4:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        4:  237:  if (state->phase != 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  238:    {
        1:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        3:  243:  if ( state->numActions < 1 )
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        2:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
        2:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
        1:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        1:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        1:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        1:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        1:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 5 returned 100% blocks executed 93%
        5:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        5:  280:  who = state->whoseTurn;
        -:  281:
        5:  282:  if (state->numBuys < 1){
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        4:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        3:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
        3:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        3:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        3:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        3:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        3:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 2 returned 100% blocks executed 100%
        2:  315:int handCard(int handPos, struct gameState *state) {
        2:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        2:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 106 returned 100% blocks executed 100%
      106:  320:int supplyCount(int card, struct gameState *state) {
      106:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 2712 returned 100% blocks executed 100%
     2712:  346:int whoseTurn(struct gameState *state) {
     2712:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 122 returned 100% blocks executed 100%
      122:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      122:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -:  396:    {
       37:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       85:  401:  j = 0;
     2210:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     2125:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:  405:	{
      252:  406:	  j++;
        -:  407:	}
        -:  408:    }
       85:  409:  if ( j >= 3)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  410:    {
       84:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 27053 returned 100% blocks executed 100%
    27053:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    27053:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      260:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      250:  534:      state->deck[player][i] = state->discard[player][i];
      250:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       10:  538:    state->deckCount[player] = state->discardCount[player];
       10:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       10:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       10:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       10:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       10:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       10:  559:    if (deckCounter == 0)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
        9:  560:      return -1;
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    27043:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    27043:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    27043:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    27043:  576:    state->deckCount[player]--;
    27043:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    27044:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 49 returned 100% blocks executed 23%
       49:  583:int getCost(int cardNumber)
        -:  584:{
       49:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 31%
branch  5 taken 31%
branch  6 taken 18%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 6%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 14%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
       15:  596:      return 0;
        -:  597:    case silver:
       15:  598:      return 3;
        -:  599:    case gold:
        9:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
        3:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
        7:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function play_smithy called 615 returned 100% blocks executed 100%
      615:  646:void play_smithy(struct gameState *state, int handPos) {
      615:  647:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  648:  //+3 Cards
        -:  649:  // Introduce bug - player draws 2 cards instead of original 3
        -:  650:  int i;
     1845:  651:  for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  652:  {
     1230:  653:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  654:  }
        -:  655:      
        -:  656:  //discard card from hand
      615:  657:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
      615:  658:}
        -:  659:
function play_adventurer called 215 returned 100% blocks executed 100%
      215:  660:void play_adventurer(struct gameState *state) {
        -:  661:  int temphand[MAX_HAND];
      215:  662:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      215:  663:  int drawntreasure = 0, cardDrawn = 0, z = 0;
        -:  664:
        -:  665:  // Introduce bug - continue drawing until player receive 3 treasures instead of original 2
     6329:  666:  while(drawntreasure<3){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
     5899:  667:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  668:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  669:    }
     5899:  670:    drawCard(currentPlayer, state);
call    0 returned 100%
     5899:  671:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     5899:  672:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
      645:  673:      drawntreasure++;
        -:  674:    else{
     5254:  675:      temphand[z]=cardDrawn;
     5254:  676:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     5254:  677:      z++;
        -:  678:    }
        -:  679:  }
     5684:  680:  while(z-1>=0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
     5254:  681:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     5254:  682:    z=z-1;
        -:  683:  }
      215:  684:}
        -:  685:
function play_village called 1 returned 100% blocks executed 100%
        1:  686:void play_village(struct gameState *state, int handPos) {
        1:  687:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  688:  //+1 Card
        1:  689:  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  690:      
        -:  691:  // Introduce bug - player gets an additional 3 actions instead of original 2
        1:  692:  state->numActions = state->numActions + 3;
        -:  693:      
        -:  694:  //discard played card from hand
        1:  695:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  696:}
        -:  697:
function play_council_room called 1812 returned 100% blocks executed 100%
     1812:  698:void play_council_room(struct gameState *state, int handPos) {
     1812:  699:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  700:  //+4 Cards
        -:  701:  int i;
     9060:  702:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  703:  {
     7248:  704:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  705:  }
        -:  706:      
        -:  707:  // Introduce bug - player loses a buy
     1812:  708:  state->numBuys--;
        -:  709:      
        -:  710:  // Introduce bug - all other players do not get to draw
        -:  711:
        -:  712:  //discard played card from hand
     1812:  713:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1812:  714:}
        -:  715:
function play_sea_hag called 0 returned 0% blocks executed 0%
    #####:  716:void play_sea_hag(struct gameState *state) {
    #####:  717:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  718:  int i;
    #####:  719:  for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  720:    if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####:  721:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####:  722:      state->discardCount[i]++;
    #####:  723:     state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  724:    }
        -:  725:  }
    #####:  726:}
        -:  727:
function cardEffect called 67 returned 100% blocks executed 13%
       67:  728:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  729:{
        -:  730:  int i;
        -:  731:  int j;
        -:  732:  int k;
        -:  733:  int x;
        -:  734:  int index;
       67:  735:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       67:  736:  int nextPlayer = currentPlayer + 1;
        -:  737:
       67:  738:  int tributeRevealedCards[2] = {-1, -1};
        -:  739:  int temphand[MAX_HAND];// moved above the if statement
       67:  740:  int drawntreasure=0;
        -:  741:  int cardDrawn;
       67:  742:  int z = 0;// this is the counter for the temp hand
       67:  743:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  744:    nextPlayer = 0;
        -:  745:  }
        -:  746:  
        -:  747:	
        -:  748:  //uses switch to select card and perform actions
       67:  749:  switch( card ) 
branch  0 taken 22%
branch  1 taken 18%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 36%
branch  5 taken 0%
branch  6 taken 22%
branch  7 taken 1%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  750:    {
        -:  751:    case adventurer:
       15:  752:      play_adventurer(state);
call    0 returned 100%
       15:  753:      return 0;
        -:  754:			
        -:  755:    case council_room:
       12:  756:      play_council_room(state, handPos);
call    0 returned 100%
       12:  757:      return 0;
        -:  758:			
        -:  759:    case feast:
        -:  760:      //gain card with cost up to 5
        -:  761:      //Backup hand
    #####:  762:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  763:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  764:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  765:      }
        -:  766:      //Backup hand
        -:  767:
        -:  768:      //Update Coins for Buy
    #####:  769:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  770:      x = 1;//Condition to loop on
    #####:  771:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  772:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  773:	  if (DEBUG)
        -:  774:	    printf("None of that card left, sorry!\n");
        -:  775:
        -:  776:	  if (DEBUG){
        -:  777:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  778:	  }
        -:  779:	}
    #####:  780:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  781:	  printf("That card is too expensive!\n");
call    0 never executed
    #####:  782:	  x = 0;
        -:  783:	  if (DEBUG){
        -:  784:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  785:	  }
        -:  786:	}
        -:  787:	else{
        -:  788:
        -:  789:	  if (DEBUG){
        -:  790:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  791:	  }
        -:  792:
    #####:  793:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  794:	  x = 0;//No more buying cards
        -:  795:
        -:  796:	  if (DEBUG){
        -:  797:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  798:	  }
        -:  799:
        -:  800:	}
        -:  801:      }     
        -:  802:
        -:  803:      //Reset Hand
    #####:  804:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  805:	state->hand[currentPlayer][i] = temphand[i];
    #####:  806:	temphand[i] = -1;
        -:  807:      }
        -:  808:      //Reset Hand
        -:  809:      			
    #####:  810:      return 0;
        -:  811:			
        -:  812:    case gardens:
    #####:  813:      return -1;
        -:  814:			
        -:  815:    case mine:
       24:  816:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  817:
       24:  818:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 13% (fallthrough)
branch  3 taken 88%
        -:  819:	{
        3:  820:	  return -1;
        -:  821:	}
        -:  822:		
       21:  823:      if (choice2 > treasure_map || choice2 < curse)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  824:	{
    #####:  825:	  return -1;
        -:  826:	}
        -:  827:
       21:  828:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
        -:  829:	{
        3:  830:	  return -1;
        -:  831:	}
        -:  832:
       18:  833:      gainCard(choice2, state, 2, currentPlayer);
call    0 returned 100%
        -:  834:
        -:  835:      //discard card from hand
       18:  836:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  837:
        -:  838:      //discard trashed card
       93:  839:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  840:	{
       78:  841:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  842:	    {
        3:  843:	      discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        3:  844:	      break;
        -:  845:	    }
        -:  846:	}
        -:  847:			
       18:  848:      return 0;
        -:  849:			
        -:  850:    case remodel:
    #####:  851:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  852:
    #####:  853:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  854:	{
    #####:  855:	  return -1;
        -:  856:	}
        -:  857:
    #####:  858:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  859:
        -:  860:      //discard card from hand
    #####:  861:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  862:
        -:  863:      //discard trashed card
    #####:  864:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  865:	{
    #####:  866:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  867:	    {
    #####:  868:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  869:	      break;
        -:  870:	    }
        -:  871:	}
        -:  872:
        -:  873:
    #####:  874:      return 0;
        -:  875:		
        -:  876:    case smithy:
       15:  877:      play_smithy(state, handPos);
call    0 returned 100%
       15:  878:      return 0;
        -:  879:		
        -:  880:    case village:
        1:  881:      play_village(state, handPos);
call    0 returned 100%
        1:  882:      return 0;
        -:  883:		
        -:  884:    case baron:
    #####:  885:      state->numBuys++;//Increase buys by 1!
    #####:  886:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  887:	int p = 0;//Iterator for hand!
    #####:  888:	int card_not_discarded = 1;//Flag for discard set!
    #####:  889:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  890:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  891:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  892:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  893:	    state->discardCount[currentPlayer]++;
    #####:  894:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  895:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  896:	    }
    #####:  897:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  898:	    state->handCount[currentPlayer]--;
    #####:  899:	    card_not_discarded = 0;//Exit the loop
        -:  900:	  }
    #####:  901:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  902:	    if(DEBUG) {
        -:  903:	      printf("No estate cards in your hand, invalid choice\n");
        -:  904:	      printf("Must gain an estate if there are any\n");
        -:  905:	    }
    #####:  906:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  907:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  908:	      state->supplyCount[estate]--;//Decrement estates
    #####:  909:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  910:		isGameOver(state);
call    0 never executed
        -:  911:	      }
        -:  912:	    }
    #####:  913:	    card_not_discarded = 0;//Exit the loop
        -:  914:	  }
        -:  915:			    
        -:  916:	  else{
    #####:  917:	    p++;//Next card
        -:  918:	  }
        -:  919:	}
        -:  920:      }
        -:  921:			    
        -:  922:      else{
    #####:  923:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  924:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  925:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  926:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  927:	    isGameOver(state);
call    0 never executed
        -:  928:	  }
        -:  929:	}
        -:  930:      }
        -:  931:	    
        -:  932:      
    #####:  933:      return 0;
        -:  934:		
        -:  935:    case great_hall:
        -:  936:      //+1 Card
    #####:  937:      drawCard(currentPlayer, state);
call    0 never executed
        -:  938:			
        -:  939:      //+1 Actions
    #####:  940:      state->numActions++;
        -:  941:			
        -:  942:      //discard card from hand
    #####:  943:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  944:      return 0;
        -:  945:		
        -:  946:    case minion:
        -:  947:      //+1 action
    #####:  948:      state->numActions++;
        -:  949:			
        -:  950:      //discard card from hand
    #####:  951:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  952:			
    #####:  953:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  954:	{
    #####:  955:	  state->coins = state->coins + 2;
        -:  956:	}
        -:  957:			
    #####:  958:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  959:	{
        -:  960:	  //discard hand
    #####:  961:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  962:	    {
    #####:  963:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  964:	    }
        -:  965:				
        -:  966:	  //draw 4
    #####:  967:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  970:	    }
        -:  971:				
        -:  972:	  //other players discard hand and redraw if hand size > 4
    #####:  973:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  974:	    {
    #####:  975:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  976:		{
    #####:  977:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  978:		    {
        -:  979:		      //discard hand
    #####:  980:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  981:			{
    #####:  982:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  983:			}
        -:  984:							
        -:  985:		      //draw 4
    #####:  986:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  987:			{
    #####:  988:			  drawCard(i, state);
call    0 never executed
        -:  989:			}
        -:  990:		    }
        -:  991:		}
        -:  992:	    }
        -:  993:				
        -:  994:	}
    #####:  995:      return 0;
        -:  996:		
        -:  997:    case steward:
    #####:  998:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  999:	{
        -: 1000:	  //+2 cards
    #####: 1001:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1002:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1003:	}
    #####: 1004:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1005:	{
        -: 1006:	  //+2 coins
    #####: 1007:	  state->coins = state->coins + 2;
        -: 1008:	}
        -: 1009:      else
        -: 1010:	{
        -: 1011:	  //trash 2 cards in hand
    #####: 1012:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1013:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1014:	}
        -: 1015:			
        -: 1016:      //discard card from hand
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case tribute:
    #####: 1021:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1022:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1023:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	  state->deckCount[nextPlayer]--;
        -: 1025:	}
    #####: 1026:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1027:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1028:	  state->discardCount[nextPlayer]--;
        -: 1029:	}
        -: 1030:	else{
        -: 1031:	  //No Card to Reveal
        -: 1032:	  if (DEBUG){
        -: 1033:	    printf("No cards to reveal\n");
        -: 1034:	  }
        -: 1035:	}
        -: 1036:      }
        -: 1037:	    
        -: 1038:      else{
    #####: 1039:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1040:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1041:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1042:	    state->deckCount[nextPlayer]++;
    #####: 1043:	    state->discard[nextPlayer][i] = -1;
    #####: 1044:	    state->discardCount[nextPlayer]--;
        -: 1045:	  }
        -: 1046:			    
    #####: 1047:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1048:	} 
    #####: 1049:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:	state->deckCount[nextPlayer]--;
    #####: 1052:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
        -: 1055:      }    
        -: 1056:		       
    #####: 1057:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1058:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1059:	state->playedCardCount++;
    #####: 1060:	tributeRevealedCards[1] = -1;
        -: 1061:      }
        -: 1062:
    #####: 1063:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1064:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1065:	  state->coins += 2;
        -: 1066:	}
        -: 1067:		    
    #####: 1068:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1069:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1070:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1071:	}
        -: 1072:	else{//Action Card
    #####: 1073:	  state->numActions = state->numActions + 2;
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
    #####: 1077:      return 0;
        -: 1078:		
        -: 1079:    case ambassador:
    #####: 1080:      j = 0;		//used to check if player has enough cards to discard
        -: 1081:
    #####: 1082:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1083:	{
    #####: 1084:	  return -1;				
        -: 1085:	}
        -: 1086:
    #####: 1087:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  return -1;
        -: 1090:	}
        -: 1091:
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1095:	    {
    #####: 1096:	      j++;
        -: 1097:	    }
        -: 1098:	}
    #####: 1099:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  return -1;				
        -: 1102:	}
        -: 1103:
        -: 1104:      if (DEBUG) 
        -: 1105:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1106:
        -: 1107:      //increase supply count for choosen card by amount being discarded
    #####: 1108:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1109:			
        -: 1110:      //each other player gains a copy of revealed card
    #####: 1111:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:	{
    #####: 1113:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1114:	    {
    #####: 1115:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1116:	    }
        -: 1117:	}
        -: 1118:
        -: 1119:      //discard played card from hand
    #####: 1120:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1121:
        -: 1122:      //trash copies of cards returned to supply
    #####: 1123:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1124:	{
    #####: 1125:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1126:	    {
    #####: 1127:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1128:		{
    #####: 1129:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1130:		  break;
        -: 1131:		}
        -: 1132:	    }
        -: 1133:	}			
        -: 1134:
    #####: 1135:      return 0;
        -: 1136:		
        -: 1137:    case cutpurse:
        -: 1138:
    #####: 1139:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1145:		{
    #####: 1146:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1147:		    {
    #####: 1148:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1149:		      break;
        -: 1150:		    }
    #####: 1151:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1152:		    {
    #####: 1153:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1154:			{
        -: 1155:			  if (DEBUG)
        -: 1156:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1157:			}	
    #####: 1158:		      break;
        -: 1159:		    }		
        -: 1160:		}
        -: 1161:					
        -: 1162:	    }
        -: 1163:				
        -: 1164:	}				
        -: 1165:
        -: 1166:      //discard played card from hand
    #####: 1167:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1168:
    #####: 1169:      return 0;
        -: 1170:
        -: 1171:		
        -: 1172:    case embargo: 
        -: 1173:      //+2 Coins
    #####: 1174:      state->coins = state->coins + 2;
        -: 1175:			
        -: 1176:      //see if selected pile is in play
    #####: 1177:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1178:	{
    #####: 1179:	  return -1;
        -: 1180:	}
        -: 1181:			
        -: 1182:      //add embargo token to selected supply pile
    #####: 1183:      state->embargoTokens[choice1]++;
        -: 1184:			
        -: 1185:      //trash card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case outpost:
        -: 1190:      //set outpost flag
    #####: 1191:      state->outpostPlayed++;
        -: 1192:			
        -: 1193:      //discard card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case salvager:
        -: 1198:      //+1 buy
    #####: 1199:      state->numBuys++;
        -: 1200:			
    #####: 1201:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1202:	{
        -: 1203:	  //gain coins equal to trashed card
    #####: 1204:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1205:	  //trash card
    #####: 1206:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1207:	}
        -: 1208:			
        -: 1209:      //discard card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1211:      return 0;
        -: 1212:		
        -: 1213:    case sea_hag:
    #####: 1214:      play_sea_hag(state);
call    0 never executed
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case treasure_map:
        -: 1218:      //search hand for another treasure_map
    #####: 1219:      index = -1;
    #####: 1220:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1221:	{
    #####: 1222:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1223:	    {
    #####: 1224:	      index = i;
    #####: 1225:	      break;
        -: 1226:	    }
        -: 1227:	}
    #####: 1228:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1229:	{
        -: 1230:	  //trash both treasure cards
    #####: 1231:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1232:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1233:
        -: 1234:	  //gain 4 Gold cards
    #####: 1235:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1236:	    {
    #####: 1237:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1238:	    }
        -: 1239:				
        -: 1240:	  //return success
    #####: 1241:	  return 1;
        -: 1242:	}
        -: 1243:			
        -: 1244:      //no second treasure_map found in hand
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:	
    #####: 1248:  return -1;
        -: 1249:}
        -: 1250:
function discardCard called 4849 returned 100% blocks executed 78%
     4849: 1251:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1252:{
        -: 1253:	
        -: 1254:  //if card is not trashed, added to Played pile 
     4849: 1255:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1256:    {
        -: 1257:      //add card to played pile
     4849: 1258:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     4849: 1259:      state->playedCardCount++;
        -: 1260:    }
        -: 1261:	
        -: 1262:  //set played card to -1
     4849: 1263:  state->hand[currentPlayer][handPos] = -1;
        -: 1264:	
        -: 1265:  //remove card from player's hand
     4849: 1266:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
     4849: 1271:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
        -: 1276:  else 	
        -: 1277:    {
        -: 1278:      //replace discarded card with last card in hand
     4849: 1279:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1280:      //set last card to -1
     4849: 1281:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1282:      //reduce number of cards in hand
     4849: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        -: 1285:	
     4849: 1286:  return 0;
        -: 1287:}
        -: 1288:
function gainCard called 21 returned 100% blocks executed 80%
       21: 1289:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1290:{
        -: 1291:  //Note: supplyPos is enum of choosen card
        -: 1292:	
        -: 1293:  //check if supply pile is empty (0) or card is not used in game (-1)
       21: 1294:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1295:    {
    #####: 1296:      return -1;
        -: 1297:    }
        -: 1298:	
        -: 1299:  //added card for [whoseTurn] current player:
        -: 1300:  // toFlag = 0 : add to discard
        -: 1301:  // toFlag = 1 : add to deck
        -: 1302:  // toFlag = 2 : add to hand
        -: 1303:
       21: 1304:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1305:    {
    #####: 1306:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1307:      state->deckCount[player]++;
        -: 1308:    }
       21: 1309:  else if (toFlag == 2)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -: 1310:    {
       18: 1311:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       18: 1312:      state->handCount[player]++;
        -: 1313:    }
        -: 1314:  else
        -: 1315:    {
        3: 1316:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1317:      state->discardCount[player]++;
        -: 1318:    }
        -: 1319:	
        -: 1320:  //decrease number in supply pile
       21: 1321:  state->supplyCount[supplyPos]--;
        -: 1322:	 
       21: 1323:  return 0;
        -: 1324:}
        -: 1325:
function updateCoins called 17 returned 100% blocks executed 82%
       17: 1326:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1327:{
        -: 1328:  int i;
        -: 1329:	
        -: 1330:  //reset coin count
       17: 1331:  state->coins = 0;
        -: 1332:
        -: 1333:  //add coins for each Treasure card in player's hand
      102: 1334:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1335:    {
       85: 1336:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1337:	{
       68: 1338:	  state->coins += 1;
        -: 1339:	}
       17: 1340:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1341:	{
    #####: 1342:	  state->coins += 2;
        -: 1343:	}
       17: 1344:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1345:	{
    #####: 1346:	  state->coins += 3;
        -: 1347:	}	
        -: 1348:    }	
        -: 1349:
        -: 1350:  //add bonus
       17: 1351:  state->coins += bonus;
        -: 1352:
       17: 1353:  return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357://end of dominion.c
        -: 1358:
