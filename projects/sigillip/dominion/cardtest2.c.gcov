        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<stdlib.h>
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <math.h>
        -:    7:#include <assert.h>
        -:    8:#include <string.h>
        -:    9:#include <stdbool.h>
        -:   10:
       42:   11:void customAssert(int expression, char* errorMessage, bool *allPassed){
        -:   12:
       42:   13:        if(expression != 1){
        1:   14:                printf("Assertion Failed: %s\n",errorMessage);
        1:   15:                fflush(stdout);
        1:   16:		*allPassed = false;
        -:   17:		
        -:   18:        }
       42:   19:}
        -:   20:
        -:   21:
        1:   22:int main(int argc, char* argv[]){
        -:   23:
        1:   24:	bool allTestPassed = true;
        -:   25:	
        1:   26:	printf("\n-----------TESTING CARD 2, ADVENTURER--------------\n");
        1:   27:	fflush(stdout);
        -:   28:
        1:   29:	int seed = 1000;
        1:   30:        int numPlayers = 2;
        1:   31:        int thisPlayer = 0;
        -:   32:        struct gameState G, testG;
        1:   33:        int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,sea_hag, tribute, smithy, council_room};
        -:   34:
        1:   35:        initializeGame(numPlayers, k, seed, &G);
        -:   36:
        -:   37:        //Test player received 2 extra cards
        1:   38:        memcpy(&testG, &G, sizeof(struct gameState));
        1:   39:	int expectedHandCount = testG.handCount[thisPlayer] + 2; //change back to 2 
        1:   40:        cardEffect(adventurer, 0, 0, 0, &testG, 0, 0);
        1:   41:        customAssert(testG.handCount[thisPlayer] == expectedHandCount,"Hand Count Incorrect", &allTestPassed);
        -:   42:        
        -:   43:	//Test 2 extra cards are treasur cards 
        1:   44:	int card1 = (G.hand[thisPlayer][G.handCount[thisPlayer]-1]);
        1:   45:	int card2 = (G.hand[thisPlayer][G.handCount[thisPlayer]-2]);
        1:   46:	customAssert( ((card1 == silver || card1 == gold || card1 == copper) && (card2 == silver || card2 == gold || card2 == copper)), "Cards taken not treasures", &allTestPassed);
        -:   47:
        -:   48:	//Test trash pile is not increased 
        1:   49:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   50:	int initialDiscardPile = G.discardCount[thisPlayer];
        1:   51:	cardEffect(adventurer, 0, 0, 0, &testG, 0, 0);
        1:   52:	customAssert( initialDiscardPile == G.discardCount[thisPlayer],"Trash pile increased", &allTestPassed);
        -:   53:	        
        -:   54:	//Test playing card returns 0
        1:   55:        memcpy(&testG, &G, sizeof(struct gameState));
        1:   56:        int result = cardEffect(adventurer, 0, 0, 0, &testG, 0, 0);
        1:   57:        customAssert(result == 0, "Should return 0 as value", &allTestPassed);
        -:   58:
        -:   59:	//Test Other player states dont change
        1:   60:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   61:	int otherPlayer = 1;
        1:   62:	cardEffect(adventurer, 0, 0, 0, &testG, 0, 0);
        1:   63:	customAssert(G.deckCount[otherPlayer] == testG.deckCount[otherPlayer],"Other player deck count changed", &allTestPassed);
        1:   64:	customAssert(G.discardCount[otherPlayer] == testG.discardCount[otherPlayer],"Other player discard count changed", &allTestPassed);
        -:   65:	
        1:   66:	int i = 0;
       11:   67:	for( i = 0; i < G.deckCount[otherPlayer]; i++)
        -:   68:	{
       10:   69:		customAssert(G.deck[otherPlayer][i] == testG.deck[otherPlayer][i], "Other player deck altered", &allTestPassed);
        -:   70:	}
        -:   71:	
        -:   72:	//victory and kingdom cards dont change
        1:   73:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   74:	cardEffect(adventurer, 0, 0, 0, &testG, 0, 0);
       27:   75:	for( i = 0; i < treasure_map; i++)
        -:   76:	{	
       26:   77:		customAssert(testG.supplyCount[i] == G.supplyCount[i],"Kingdom cards altered", &allTestPassed);
        -:   78:	}
        -:   79:
        -:   80:	
        -:   81:
        1:   82:	if(allTestPassed  == true )
        -:   83:	{
    #####:   84:		printf("\n--------------------CARD 2 PASSED------------------------\n");
    #####:   85:		fflush(stdout);
        -:   86:	}	
        -:   87:	else
        -:   88:	{
        1:   89:		printf("\n----------------------CARD 2 TEST FAILED--------------------\n");
        1:   90:		fflush(stdout);
        -:   91:	}
        -:   92:
        1:   93:	return 0;
        -:   94:}
