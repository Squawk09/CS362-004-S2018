        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<stdlib.h>
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include "rngs.h"
        -:    6:#include <math.h>
        -:    7:#include <assert.h>
        -:    8:#include <string.h>
        -:    9:
        -:   10:
        -:   11:
        -:   12://current player should receive 3 cards 
        -:   13:
       41:   14:void customAssert(int expression, char* errorMessage){
        -:   15:
       41:   16:	if(expression != 1){
        1:   17:		printf("Assertion Failed: %s\n",errorMessage);
        1:   18:		fflush(stdout);
        -:   19:	}
       41:   20:}
        -:   21:
        -:   22:
        1:   23:int main(int argc, char *argv[])
        -:   24:{
        1:   25:	int seed = 1000;
        1:   26:	int numPlayers = 2;
        1:   27:	int thisPlayer = 0;
        -:   28:	struct gameState G, testG;
        1:   29:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,sea_hag, tribute, smithy, council_room};
        -:   30:
        1:   31:	initializeGame(numPlayers, k, seed, &G);
        -:   32:	
        1:   33:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   34:
        -:   35:	//Test player received 2 extra cards
        1:   36:	int expectedHandCount = testG.handCount[thisPlayer] + 3 - 1;
        1:   37:	cardEffect(smithy, 0, 0, 0, &testG, 0, 0);
        1:   38:	customAssert(testG.handCount[thisPlayer] == expectedHandCount,"Hand Count Incorrect");
        -:   39:
        -:   40:	//Test playing card returns 0 
        1:   41:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   42:	int result = cardEffect(smithy, 0, 0, 0, &testG, 0, 0);
        1:   43:	customAssert(result == 0, "Should return 0 as value");
        -:   44:	
        -:   45:	//Test Cards come fron own pile 
        1:   46:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   47:	cardEffect(smithy, 0, 0, 0, &testG, 0, 0);
        1:   48:	customAssert( testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - 3, "Card didnt come from own deck");
        -:   49:	
        -:   50:	//Test Other player states dont change 
        1:   51:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   52:	int otherPlayer = 1;
        1:   53:	cardEffect(smithy, 0, 0, 0, &testG, 0, 0);
        -:   54:	
        1:   55:	customAssert(G.deckCount[otherPlayer] == testG.deckCount[otherPlayer],"Other player deck count changed");
        1:   56:	customAssert(G.discardCount[otherPlayer] == testG.discardCount[otherPlayer],"Other player discard count changed");
        -:   57:	
        1:   58:	int i = 0;
       11:   59:	for( i = 0; i < G.deckCount[otherPlayer]; i++)
        -:   60:	{
       10:   61:		customAssert(G.deck[otherPlayer][i] == testG.deck[otherPlayer][i], "Other player deck altered");
        -:   62:	}
        -:   63:	
        -:   64:	//victory and kingdom cards dont change 
        1:   65:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   66:	cardEffect(smithy, 0, 0, 0, &testG, 0, 0);
       27:   67:	for( i = 0; i < treasure_map; i++){
       26:   68:		customAssert(testG.supplyCount[i] == G.supplyCount[i],"Kingdom cards altered");
        -:   69:	}
        -:   70:	
        1:   71:	return 0;
        -:   72:}	
